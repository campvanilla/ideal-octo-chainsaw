# This is a basic workflow that is manually triggered to create a pull-request for a release bumping the package.json & manifest.json versions

name: 'üèÅ Create Release PR'

# Controls when the action will run. Workflow runs when manually triggered using the UI or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      newVersion:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'The version label; follows the same format as `npm version` command'
        # Default value if no value is explicitly provided
        default: 'patch'
        # Input has to be provided for the workflow to run
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  bump-version:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: 'Bump npm & manifest versions'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12'

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: 'install dependencies'
      run: npm install

    # Runs a single command using the runners shell
    - name: 'bump npm version'
      run: npm version --no-git-tag-version "${{ github.event.inputs.newVersion }}"
    - name: 'bump manifest version'
      id: 'bump-version'
      shell: python
      run: |
        import json, os
        with open('package.json') as read_package_file:
          package = json.load(read_package_file)
        with open('src/manifest.json') as read_manifest_file:
          manifest = json.load(read_manifest_file)
        newVersion = package['version']
        manifest['version'] = newVersion
        with open('src/manifest.json', 'w') as write_manifest_file:
          json.dump(manifest, write_manifest_file)
        
        print("new version in package.json", newVersion)
        os.system('echo "::set-output name=NEW_VERSION::{0}"'.format(newVersion))
    - name: 'eslint/prettier'
      run: npx eslint --fix src/manifest.json
    - name: 'create pull request'
      uses: peter-evans/create-pull-request@v3
      id: create-pull-request
      with:
        commit-message: "üèÅ: v${{ steps.bump-version.outputs.NEW_VERSION }}"
        branch: "release/v${{ steps.bump-version.outputs.NEW_VERSION }}"
        delete-branch: true
        title: "üèÅ: v${{ steps.bump-version.outputs.NEW_VERSION }}"
        reviewers: "rheaditi,abinavseelan"
    - name: Output
      run: |
        echo "Pull Request Number - ${{ steps.create-pull-request.outputs.pull-request-number }}"
        echo "Pull Request URL - ${{ steps.create-pull-request.outputs.pull-request-url }}"
